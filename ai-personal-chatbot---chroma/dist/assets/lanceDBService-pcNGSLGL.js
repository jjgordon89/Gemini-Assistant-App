import{connect as g}from"@lancedb/lancedb";import{v as f}from"./index-pLuvMJlQ.js";const w="./.lancedb",l="conversations",o=768;class c{constructor(){this.dbConnection=null,this.table=null,this.isInitialized=!1,this.initializationPromise=null}static getInstance(){return c.instance||(c.instance=new c),c.instance}async initialize(){if(!this.isInitialized)return this.initializationPromise?this.initializationPromise:(this.initializationPromise=(async()=>{try{if(console.log("Initializing LanceDB..."),this.dbConnection=await g(w),(await this.dbConnection.tableNames()).includes(l))this.table=await this.dbConnection.openTable(l),console.log("Opened existing LanceDB table:",l);else{const t={id:"string",text:"string",embedding:{type:"fixed_size_list",length:o,children:{type:"float"}},role:"string",timestamp:"string",userId:"string",metadata:"json"};this.table=await this.dbConnection.createTable(l,[],t),console.log("Created new LanceDB table:",l)}this.isInitialized=!0,console.log("LanceDB initialization complete")}catch(e){throw console.error("Failed to initialize LanceDB:",e),this.isInitialized=!1,e}finally{this.initializationPromise=null}})(),this.initializationPromise)}async ensureInitialized(){this.isInitialized||await this.initialize()}async storeMessage(e,t,n,a){await this.ensureInitialized();try{if(t.length!==o)throw new Error(`Embedding dimension mismatch. Expected ${o}, got ${t.length}`);const i=e.id||f(),s={id:i,text:e.text,embedding:t,role:e.sender,timestamp:e.timestamp.toISOString(),userId:n,metadata:{...a,...e.metadata}};return await this.table.add([s]),console.log("Added message to LanceDB:",i),i}catch(i){throw console.error("Error storing message in LanceDB:",i),i}}async findSimilarMessages(e,t=5,n=.7,a){await this.ensureInitialized();try{if(e.length!==o)throw new Error(`Embedding dimension mismatch. Expected ${o}, got ${e.length}`);let i=this.table.search(e).limit(t*2);return a&&(i=i.where(`userId = '${a}'`)),(await i.execute()).filter(r=>r._distance<=1-n).slice(0,t).map(r=>{const h={id:r.id,text:r.text,sender:r.role,timestamp:new Date(r.timestamp),metadata:r.metadata},m=1-r._distance;return{message:h,similarity:m}})}catch(i){throw console.error("Error searching similar messages in LanceDB:",i),i}}async getRecentMessages(e=20,t){await this.ensureInitialized();try{let n=this.table;return t&&(n=n.where(`userId = '${t}'`)),(await n.orderBy("timestamp","desc").limit(e).execute()).map(s=>({id:s.id,text:s.text,sender:s.role,timestamp:new Date(s.timestamp),metadata:s.metadata})).sort((s,d)=>s.timestamp.getTime()-d.timestamp.getTime())}catch(n){throw console.error("Error retrieving recent messages from LanceDB:",n),n}}async updateMessage(e,t,n){await this.ensureInitialized();try{const a={};if(t.text!==void 0&&(a.text=t.text),t.sender!==void 0&&(a.role=t.sender),t.timestamp!==void 0&&(a.timestamp=t.timestamp.toISOString()),t.metadata!==void 0&&(a.metadata=t.metadata),n!==void 0){if(n.length!==o)throw new Error(`Embedding dimension mismatch. Expected ${o}, got ${n.length}`);a.embedding=n}if(Object.keys(a).length===0)return!0;const i=await this.table.where(`id = '${e}'`).execute();if(i.length===0)return console.error(`Message with ID ${e} not found for update`),!1;const s={...i[0],...a};return await this.table.delete(`id = '${e}'`),await this.table.add([s]),console.log(`Updated message in LanceDB: ${e}`),!0}catch(a){throw console.error("Error updating message in LanceDB:",a),a}}async deleteMessage(e){await this.ensureInitialized();try{return await this.table.delete(`id = '${e}'`),console.log(`Deleted message from LanceDB: ${e}`),!0}catch(t){throw console.error("Error deleting message from LanceDB:",t),t}}async deleteUserMessages(e){await this.ensureInitialized();try{const t=(await this.table.where(`userId = '${e}'`).execute()).length;return await this.table.delete(`userId = '${e}'`),console.log(`Deleted all messages for user: ${e}`),t}catch(t){throw console.error(`Error deleting messages for user ${e} from LanceDB:`,t),t}}async close(){if(this.dbConnection)try{this.table=null,this.dbConnection=null,this.isInitialized=!1,console.log("LanceDB connection closed")}catch(e){console.error("Error closing LanceDB connection:",e)}}}export{c as default};
